{
  "api/Microsoft.Extensions.DependencyInjection.RegistrationExtensions.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.RegistrationExtensions.html",
    "title": "Class RegistrationExtensions | SQLHelper API Reference",
    "summary": "Class RegistrationExtensions Namespace Microsoft.Extensions.DependencyInjection Assembly SQLHelper.DB.dll Registration extension methods public static class RegistrationExtensions Inheritance object RegistrationExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterSQLHelper(ICanisterConfiguration?) Registers the library with the bootstrapper. public static ICanisterConfiguration? RegisterSQLHelper(this ICanisterConfiguration? bootstrapper) Parameters bootstrapper ICanisterConfiguration The bootstrapper. Returns ICanisterConfiguration The bootstrapper RegisterSQLHelper(IServiceCollection?) Registers the SQLHelper library with the service collection. public static IServiceCollection? RegisterSQLHelper(this IServiceCollection? services) Parameters services IServiceCollection The service collection. Returns IServiceCollection The service collection with SQLHelper registered."
  },
  "api/Microsoft.Extensions.DependencyInjection.html": {
    "href": "api/Microsoft.Extensions.DependencyInjection.html",
    "title": "Namespace Microsoft.Extensions.DependencyInjection | SQLHelper API Reference",
    "summary": "Namespace Microsoft.Extensions.DependencyInjection Classes RegistrationExtensions Registration extension methods"
  },
  "api/SQLHelperDB.CanisterModules.SQLHelperModule.html": {
    "href": "api/SQLHelperDB.CanisterModules.SQLHelperModule.html",
    "title": "Class SQLHelperModule | SQLHelper API Reference",
    "summary": "Class SQLHelperModule Namespace SQLHelperDB.CanisterModules Assembly SQLHelper.DB.dll SQLHelper Canister module. public class SQLHelperModule : IModule Inheritance object SQLHelperModule Implements IModule Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Order Order to run this in public int Order { get; } Property Value int Methods Load(IServiceCollection?) Loads the module using the bootstrapper public void Load(IServiceCollection? bootstrapper) Parameters bootstrapper IServiceCollection The bootstrapper. See Also IModule"
  },
  "api/SQLHelperDB.CanisterModules.html": {
    "href": "api/SQLHelperDB.CanisterModules.html",
    "title": "Namespace SQLHelperDB.CanisterModules | SQLHelper API Reference",
    "summary": "Namespace SQLHelperDB.CanisterModules Classes SQLHelperModule SQLHelper Canister module."
  },
  "api/SQLHelperDB.ExtensionMethods.DbCommandExtensions.html": {
    "href": "api/SQLHelperDB.ExtensionMethods.DbCommandExtensions.html",
    "title": "Class DbCommandExtensions | SQLHelper API Reference",
    "summary": "Class DbCommandExtensions Namespace SQLHelperDB.ExtensionMethods Assembly SQLHelper.DB.dll Extension methods for DbCommand public static class DbCommandExtensions Inheritance object DbCommandExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddParameter(DbCommand, string, DbType, object?, ParameterDirection) Adds a parameter to the call (for all types other than strings) public static DbCommand AddParameter(this DbCommand command, string id, DbType type, object? value = null, ParameterDirection direction = ParameterDirection.Input) Parameters command DbCommand Command object id string Name of the parameter type DbType SQL type of the parameter value object Value to add direction ParameterDirection Direction that the parameter goes (in or out) Returns DbCommand The DbCommand object Exceptions ArgumentNullException command or id AddParameter(DbCommand, string, SqlDbType, object?, ParameterDirection) Adds a parameter to the call (for all types other than strings) public static DbCommand AddParameter(this DbCommand command, string id, SqlDbType type, object? value = null, ParameterDirection direction = ParameterDirection.Input) Parameters command DbCommand Command object id string Name of the parameter type SqlDbType SQL type of the parameter value object Value to add direction ParameterDirection Direction that the parameter goes (in or out) Returns DbCommand The DbCommand object Exceptions ArgumentNullException command or id AddParameter(DbCommand, string, string, ParameterDirection) Adds a parameter to the call (for strings only) public static DbCommand AddParameter(this DbCommand command, string id, string value = \"\", ParameterDirection direction = ParameterDirection.Input) Parameters command DbCommand Command object id string Name of the parameter value string Value to add direction ParameterDirection Direction that the parameter goes (in or out) Returns DbCommand The DbCommand object AddParameter<TDataType>(DbCommand, string, TDataType?, ParameterDirection) Adds a parameter to the call (for all types other than strings) public static DbCommand AddParameter<TDataType>(this DbCommand command, string id, TDataType? value = default, ParameterDirection direction = ParameterDirection.Input) Parameters command DbCommand Command object id string Name of the parameter value TDataType Value to add direction ParameterDirection Direction that the parameter goes (in or out) Returns DbCommand The DbCommand object Type Parameters TDataType Data type of the parameter Exceptions ArgumentNullException command or id BeginTransaction(DbCommand, int) Begins a transaction public static DbTransaction? BeginTransaction(this DbCommand command, int retries = 0) Parameters command DbCommand Command object retries int The retries. Returns DbTransaction A transaction object ClearParameters(DbCommand) Clears the parameters public static DbCommand? ClearParameters(this DbCommand command) Parameters command DbCommand Command object Returns DbCommand The DBCommand object Close(DbCommand) Closes the connection public static DbCommand? Close(this DbCommand command) Parameters command DbCommand Command object Returns DbCommand The DBCommand object Commit(DbCommand) Commits a transaction public static DbCommand? Commit(this DbCommand command) Parameters command DbCommand Command object Returns DbCommand The DBCommand object ExecuteScalarAsync<TDataType>(DbCommand, TDataType?, int) Executes the stored procedure as a scalar query async public static Task<TDataType?> ExecuteScalarAsync<TDataType>(this DbCommand command, TDataType? defaultValue = default, int retries = 0) Parameters command DbCommand Command object defaultValue TDataType Default value if there is an issue retries int The retries. Returns Task<TDataType> The object of the first row and first column Type Parameters TDataType The type of the ata type. ExecuteScalar<TDataType>(DbCommand, TDataType?, int) Executes the stored procedure as a scalar query public static TDataType? ExecuteScalar<TDataType>(this DbCommand command, TDataType? defaultValue = default, int retries = 0) Parameters command DbCommand Command object defaultValue TDataType Default value if there is an issue retries int The retries. Returns TDataType The object of the first row and first column Type Parameters TDataType The type of the ata type. GetOrCreateParameter(DbCommand, string) Gets a parameter or creates it, if it is not found public static DbParameter GetOrCreateParameter(this DbCommand command, string id) Parameters command DbCommand Command object id string Name of the parameter Returns DbParameter The DbParameter associated with the ID GetOutputParameter<TDataType>(DbCommand, string, TDataType?) Returns an output parameter's value public static TDataType? GetOutputParameter<TDataType>(this DbCommand command, string id, TDataType? defaultValue = default) Parameters command DbCommand Command object id string Parameter name defaultValue TDataType Default value for the parameter Returns TDataType if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned. Type Parameters TDataType Data type of the object Open(DbCommand, int) Opens the connection public static DbCommand? Open(this DbCommand command, int retries = 0) Parameters command DbCommand Command object retries int The retries. Returns DbCommand The DBCommand object Rollback(DbCommand) Rolls back a transaction public static DbCommand? Rollback(this DbCommand command) Parameters command DbCommand Command object Returns DbCommand The DBCommand object"
  },
  "api/SQLHelperDB.ExtensionMethods.IDataRecordExtensions.html": {
    "href": "api/SQLHelperDB.ExtensionMethods.IDataRecordExtensions.html",
    "title": "Class IDataRecordExtensions | SQLHelper API Reference",
    "summary": "Class IDataRecordExtensions Namespace SQLHelperDB.ExtensionMethods Assembly SQLHelper.DB.dll Extension methods for IDataRecord objects public static class IDataRecordExtensions Inheritance object IDataRecordExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetParameter<TDataType>(IDataRecord, int, TDataType?) Returns a parameter's value public static TDataType? GetParameter<TDataType>(this IDataRecord reader, int position, TDataType? defaultValue = default) Parameters reader IDataRecord Reader object position int Position in the reader row defaultValue TDataType Default value for the parameter Returns TDataType if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned. Type Parameters TDataType The type of the data type. GetParameter<TDataType>(IDataRecord, string, TDataType?) Returns a parameter's value public static TDataType? GetParameter<TDataType>(this IDataRecord reader, string id, TDataType? defaultValue = default) Parameters reader IDataRecord Reader object id string Parameter name defaultValue TDataType Default value for the parameter Returns TDataType if the parameter exists (and isn't null or empty), it returns the parameter's value. Otherwise the default value is returned. Type Parameters TDataType The type of the ata type."
  },
  "api/SQLHelperDB.ExtensionMethods.html": {
    "href": "api/SQLHelperDB.ExtensionMethods.html",
    "title": "Namespace SQLHelperDB.ExtensionMethods | SQLHelper API Reference",
    "summary": "Namespace SQLHelperDB.ExtensionMethods Classes DbCommandExtensions Extension methods for DbCommand IDataRecordExtensions Extension methods for IDataRecord objects"
  },
  "api/SQLHelperDB.HelperClasses.BaseClasses.ParameterBase-1.html": {
    "href": "api/SQLHelperDB.HelperClasses.BaseClasses.ParameterBase-1.html",
    "title": "Class ParameterBase<TDataType> | SQLHelper API Reference",
    "summary": "Class ParameterBase<TDataType> Namespace SQLHelperDB.HelperClasses.BaseClasses Assembly SQLHelper.DB.dll Parameter base class public abstract class ParameterBase<TDataType> : IParameter<TDataType>, IParameter Type Parameters TDataType Data type of the parameter Inheritance object ParameterBase<TDataType> Implements IParameter<TDataType> IParameter Derived Parameter<TDataType> StringParameter Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Constructor Constructors ParameterBase(ParameterBase<TDataType>) Initializes a new instance of the ParameterBase<TDataType> class. protected ParameterBase(ParameterBase<TDataType> parameter) Parameters parameter ParameterBase<TDataType> The parameter. ParameterBase(string, DbType, object?, ParameterDirection, string) Parameter base class protected ParameterBase(string id, DbType type, object? value = null, ParameterDirection direction = ParameterDirection.Input, string parameterStarter = \"@\") Parameters id string ID of the parameter type DbType Database type value object Value of the parameter direction ParameterDirection Direction of the parameter parameterStarter string What the database expects as the parameter starting string (\"@\" for SQL Server, \":\" for Oracle, etc.) Remarks Constructor ParameterBase(string, SqlDbType, object?, ParameterDirection, string) Constructor protected ParameterBase(string id, SqlDbType type, object? value = null, ParameterDirection direction = ParameterDirection.Input, string parameterStarter = \"@\") Parameters id string ID of the parameter type SqlDbType Database type value object Value of the parameter direction ParameterDirection Direction of the parameter parameterStarter string What the database expects as the parameter starting string (\"@\" for SQL Server, \":\" for Oracle, etc.) ParameterBase(string, TDataType, ParameterDirection, string) Constructor protected ParameterBase(string id, TDataType value, ParameterDirection direction = ParameterDirection.Input, string parameterStarter = \"@\") Parameters id string ID of the parameter value TDataType Value of the parameter direction ParameterDirection Direction of the parameter parameterStarter string What the database expects as the parameter starting string (\"@\" for SQL Server, \":\" for Oracle, etc.) Properties BatchID Batch ID protected string BatchID { get; set; } Property Value string DatabaseType Database type public DbType DatabaseType { get; set; } Property Value DbType Direction Direction of the parameter public ParameterDirection Direction { get; set; } Property Value ParameterDirection ID The Name that the parameter goes by public string ID { get; set; } Property Value string InternalValue Gets the internal value. public object? InternalValue { get; } Property Value object The internal value. ParameterStarter Starting string of the parameter public string ParameterStarter { get; set; } Property Value string Value Parameter value public TDataType Value { get; set; } Property Value TDataType Methods AddParameter(DbCommand) Adds this parameter to the SQLHelper public abstract void AddParameter(DbCommand helper) Parameters helper DbCommand SQLHelper AddParameter(string) Finds itself in the string command and adds the value public string AddParameter(string command) Parameters command string Command to add to Returns string The resulting string CreateCopy(string) Creates a copy of the parameter public abstract IParameter CreateCopy(string suffix) Parameters suffix string Suffix to add to the parameter (for batching purposes) Returns IParameter A copy of the parameter Equals(object?) Determines if the objects are equal public override bool Equals(object? obj) Parameters obj object Object to compare to Returns bool True if they are equal, false otherwise GetHashCode() Returns a hash code for this instance. public override int GetHashCode() Returns int A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. ToString() Returns the string version of the parameter public override string ToString() Returns string The string representation of the parameter Operators operator ==(ParameterBase<TDataType>, ParameterBase<TDataType>) The == operator public static bool operator ==(ParameterBase<TDataType> first, ParameterBase<TDataType> second) Parameters first ParameterBase<TDataType> First item second ParameterBase<TDataType> Second item Returns bool true if the first and second item are the same, false otherwise operator !=(ParameterBase<TDataType>, ParameterBase<TDataType>) != operator public static bool operator !=(ParameterBase<TDataType> first, ParameterBase<TDataType> second) Parameters first ParameterBase<TDataType> First item second ParameterBase<TDataType> Second item Returns bool returns true if they are not equal, false otherwise"
  },
  "api/SQLHelperDB.HelperClasses.BaseClasses.html": {
    "href": "api/SQLHelperDB.HelperClasses.BaseClasses.html",
    "title": "Namespace SQLHelperDB.HelperClasses.BaseClasses | SQLHelper API Reference",
    "summary": "Namespace SQLHelperDB.HelperClasses.BaseClasses Classes ParameterBase<TDataType> Parameter base class"
  },
  "api/SQLHelperDB.HelperClasses.Batch.html": {
    "href": "api/SQLHelperDB.HelperClasses.Batch.html",
    "title": "Class Batch | SQLHelper API Reference",
    "summary": "Class Batch Namespace SQLHelperDB.HelperClasses Assembly SQLHelper.DB.dll Holds information for a set of commands public class Batch : IBatch Inheritance object Batch Implements IBatch Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Constructor Constructors Batch(IConnection, ObjectPool<StringBuilder>, ILogger?) Holds information for a set of commands public Batch(IConnection source, ObjectPool<StringBuilder> stringBuilderPool, ILogger? logger = null) Parameters source IConnection Source info stringBuilderPool ObjectPool<StringBuilder> The string builder pool. logger ILogger The logger. Remarks Constructor See Also IBatch Properties CommandCount Command count public int CommandCount { get; } Property Value int Commands Commands to batch protected List<ICommand> Commands { get; } Property Value List<ICommand> Headers Gets the headers. protected List<ICommand> Headers { get; } Property Value List<ICommand> The headers. Source Connection string protected IConnection Source { get; } Property Value IConnection StringBuilderPool Gets the string builder pool. public ObjectPool<StringBuilder> StringBuilderPool { get; } Property Value ObjectPool<StringBuilder> The string builder pool. Methods AddQuery(IBatch) Adds a batch's commands to the current batch public IBatch AddQuery(IBatch batch) Parameters batch IBatch Batch to add Returns IBatch This AddQuery<TCallbackData>(Action<ICommand, List<dynamic>, TCallbackData>, TCallbackData, bool, string, CommandType, params object[]?) Adds a command to be batched public IBatch AddQuery<TCallbackData>(Action<ICommand, List<dynamic>, TCallbackData> callBack, TCallbackData callbackObject, bool header, string command, CommandType commandType, params object[]? parameters) Parameters callBack Action<ICommand, List<dynamic>, TCallbackData> Callback action callbackObject TCallbackData Object used in the callback action header bool Determines if this command is a \"header\" and should be carried across batches. command string Command (SQL or stored procedure) to run commandType CommandType Command type parameters object[] Parameters to add Returns IBatch This Type Parameters TCallbackData The type of the callback data. CheckTransaction() Checks whether a transaction is needed. protected bool CheckTransaction() Returns bool True if it is, false otherwise Clear() Clears this instance. public IBatch Clear() Returns IBatch This. ExecuteAsync() Executes the commands and returns the results (async) public Task<List<List<dynamic>>> ExecuteAsync() Returns Task<List<List<dynamic>>> The results of the batched commands RemoveDuplicateCommands() Removes duplicate commands from the batch public IBatch RemoveDuplicateCommands() Returns IBatch This SetConnection(IConnection) Sets the connection. public void SetConnection(IConnection databaseConnection) Parameters databaseConnection IConnection The database connection. ToString() Converts the batch to a string public override string ToString() Returns string See Also IBatch"
  },
  "api/SQLHelperDB.HelperClasses.Command-1.html": {
    "href": "api/SQLHelperDB.HelperClasses.Command-1.html",
    "title": "Class Command<TCallbackData> | SQLHelper API Reference",
    "summary": "Class Command<TCallbackData> Namespace SQLHelperDB.HelperClasses Assembly SQLHelper.DB.dll Command holder class public class Command<TCallbackData> : ICommand Type Parameters TCallbackData The type of the callback data. Inheritance object Command<TCallbackData> Implements ICommand Inherited Members object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Command(Action<ICommand, List<dynamic>, TCallbackData>, TCallbackData, bool, string, CommandType, IParameter[]?) Constructor public Command(Action<ICommand, List<dynamic>, TCallbackData> callBack, TCallbackData callbackObject, bool header, string sqlCommand, CommandType commandType, IParameter[]? parameters) Parameters callBack Action<ICommand, List<dynamic>, TCallbackData> Called when command has been executed callbackObject TCallbackData Object header bool Determines if this command is a \"header\" and should be carried across batches. sqlCommand string SQL Command commandType CommandType Command type parameters IParameter[] Parameters Command(Action<ICommand, List<dynamic>, TCallbackData>, TCallbackData, bool, string, CommandType, string, object[]?) Constructor public Command(Action<ICommand, List<dynamic>, TCallbackData> callBack, TCallbackData callbackObject, bool header, string sqlCommand, CommandType commandType, string parameterStarter, object[]? parameters) Parameters callBack Action<ICommand, List<dynamic>, TCallbackData> Called when command has been executed callbackObject TCallbackData Object header bool Determines if this command is a \"header\" and should be carried across batches. sqlCommand string SQL Command commandType CommandType Command type parameterStarter string Parameter starter parameters object[] Parameters Properties CallBack Call back public Action<ICommand, List<dynamic>, TCallbackData> CallBack { get; } Property Value Action<ICommand, List<dynamic>, TCallbackData> CallbackData Object public TCallbackData CallbackData { get; } Property Value TCallbackData The object. CommandType Command type public CommandType CommandType { get; set; } Property Value CommandType Finalizable Used to determine if Finalize should be called. public bool Finalizable { get; } Property Value bool true if finalizable; otherwise, false. Header Determines if this command is a \"header\" and should be carried across batches. public bool Header { get; } Property Value bool true if header; otherwise, false. Parameters Parameters public IParameter[] Parameters { get; } Property Value IParameter[] SQLCommand SQL command public string SQLCommand { get; set; } Property Value string TransactionNeeded Gets a value indicating whether [transaction needed]. public bool TransactionNeeded { get; set; } Property Value bool true if [transaction needed]; otherwise, false. Methods Equals(object?) Determines if the objects are equal public override bool Equals(object? obj) Parameters obj object Object to compare to Returns bool Determines if the commands are equal Finalize(List<dynamic>) Called after the command is run public void Finalize(List<dynamic> result) Parameters result List<dynamic> Result of the command GetHashCode() Returns the hash code for the command public override int GetHashCode() Returns int The hash code for the object ToString() Returns the string representation of the command public override string ToString() Returns string The string representation of the command See Also ICommand"
  },
  "api/SQLHelperDB.HelperClasses.Connection.html": {
    "href": "api/SQLHelperDB.HelperClasses.Connection.html",
    "title": "Class Connection | SQLHelper API Reference",
    "summary": "Class Connection Namespace SQLHelperDB.HelperClasses Assembly SQLHelper.DB.dll Data source class public class Connection : IConnection Inheritance object Connection Implements IConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Connection(IConfiguration, DbProviderFactory, string) Initializes a new instance of the Connection class. public Connection(IConfiguration configuration, DbProviderFactory factory, string name) Parameters configuration IConfiguration The configuration. factory DbProviderFactory The factory. name string The name. Connection(IConfiguration, DbProviderFactory, string, string, string, int) Constructor public Connection(IConfiguration configuration, DbProviderFactory factory, string connection, string name, string parameterPrefix = \"@\", int retries = 0) Parameters configuration IConfiguration The configuration. factory DbProviderFactory The factory. connection string The connection. name string The name. parameterPrefix string The parameter prefix. retries int The retries. Exceptions ArgumentNullException configuration Properties CommandTimeout Gets the command timeout. public int CommandTimeout { get; } Property Value int The command timeout. ConnectionString Connection string public string ConnectionString { get; protected set; } Property Value string DatabaseName Gets the database. public string? DatabaseName { get; protected set; } Property Value string The database. Factory Gets the factory that the system uses to actually do the connection. public DbProviderFactory Factory { get; protected set; } Property Value DbProviderFactory The factory that the system needs to actually do the connection. Name Name of the source public string Name { get; protected set; } Property Value string The name. ParameterPrefix Parameter prefix that the source uses public string ParameterPrefix { get; protected set; } Property Value string The parameter prefix. Retries Gets the number of retries if unable to connect. public int Retries { get; protected set; } Property Value int The number of retries if unable to connect. See Also IConnection"
  },
  "api/SQLHelperDB.HelperClasses.Interfaces.IBatch.html": {
    "href": "api/SQLHelperDB.HelperClasses.Interfaces.IBatch.html",
    "title": "Interface IBatch | SQLHelper API Reference",
    "summary": "Interface IBatch Namespace SQLHelperDB.HelperClasses.Interfaces Assembly SQLHelper.DB.dll A batch of commands interface public interface IBatch Properties CommandCount Number of commands being batched int CommandCount { get; } Property Value int Methods AddQuery(IBatch) Adds a batch's commands to the current batch IBatch AddQuery(IBatch batch) Parameters batch IBatch Batch to add Returns IBatch This AddQuery<TCallbackData>(Action<ICommand, List<dynamic>, TCallbackData>, TCallbackData, bool, string, CommandType, params object[]?) Adds a command to be batched IBatch AddQuery<TCallbackData>(Action<ICommand, List<dynamic>, TCallbackData> callBack, TCallbackData callbackObject, bool header, string command, CommandType commandType, params object[]? parameters) Parameters callBack Action<ICommand, List<dynamic>, TCallbackData> Callback action callbackObject TCallbackData Object used in the callback action header bool Determines if this command is a \"header\" and should be carried across batches. command string Command (SQL or stored procedure) to run commandType CommandType Command type parameters object[] Parameters to add Returns IBatch This Type Parameters TCallbackData The type of the callback data. Clear() Clears this instance. IBatch Clear() Returns IBatch This. ExecuteAsync() Executes the commands and returns the results (async) Task<List<List<dynamic>>> ExecuteAsync() Returns Task<List<List<dynamic>>> The results of the batched commands RemoveDuplicateCommands() Removes duplicate commands from the batch IBatch RemoveDuplicateCommands() Returns IBatch This SetConnection(IConnection) Sets the connection. void SetConnection(IConnection databaseConnection) Parameters databaseConnection IConnection The database connection."
  },
  "api/SQLHelperDB.HelperClasses.Interfaces.ICommand.html": {
    "href": "api/SQLHelperDB.HelperClasses.Interfaces.ICommand.html",
    "title": "Interface ICommand | SQLHelper API Reference",
    "summary": "Interface ICommand Namespace SQLHelperDB.HelperClasses.Interfaces Assembly SQLHelper.DB.dll Command interface public interface ICommand Properties CommandType Command type CommandType CommandType { get; } Property Value CommandType Finalizable Gets a value indicating whether this ICommand is finalizable. bool Finalizable { get; } Property Value bool true if finalizable; otherwise, false. Parameters Parameters associated with the command IParameter[] Parameters { get; } Property Value IParameter[] SQLCommand Actual SQL command string SQLCommand { get; } Property Value string TransactionNeeded Gets a value indicating whether [transaction needed]. bool TransactionNeeded { get; } Property Value bool true if [transaction needed]; otherwise, false. Methods Finalize(List<dynamic>) Called after the command is run void Finalize(List<dynamic> result) Parameters result List<dynamic> Result of the command"
  },
  "api/SQLHelperDB.HelperClasses.Interfaces.IConnection.html": {
    "href": "api/SQLHelperDB.HelperClasses.Interfaces.IConnection.html",
    "title": "Interface IConnection | SQLHelper API Reference",
    "summary": "Interface IConnection Namespace SQLHelperDB.HelperClasses.Interfaces Assembly SQLHelper.DB.dll Data source interface public interface IConnection Properties ConnectionString Connection string string ConnectionString { get; } Property Value string The connection. DatabaseName Gets the database. string? DatabaseName { get; } Property Value string The database. Factory Gets the factory that the system uses to actually do the connection. DbProviderFactory Factory { get; } Property Value DbProviderFactory The factory that the system needs to actually do the connection. Name Name of the source string Name { get; } Property Value string The name. ParameterPrefix Parameter prefix that the source uses string ParameterPrefix { get; } Property Value string The parameter prefix. Retries Gets the number of retries if unable to connect. int Retries { get; } Property Value int The number of retries if unable to connect."
  },
  "api/SQLHelperDB.HelperClasses.Interfaces.IParameter-1.html": {
    "href": "api/SQLHelperDB.HelperClasses.Interfaces.IParameter-1.html",
    "title": "Interface IParameter<T> | SQLHelper API Reference",
    "summary": "Interface IParameter<T> Namespace SQLHelperDB.HelperClasses.Interfaces Assembly SQLHelper.DB.dll Parameter interface public interface IParameter<T> : IParameter Type Parameters T Value type Inherited Members IParameter.DatabaseType IParameter.Direction IParameter.ID IParameter.InternalValue IParameter.ParameterStarter IParameter.AddParameter(DbCommand) IParameter.AddParameter(string) IParameter.CreateCopy(string) Properties Value The value that the parameter is associated with T Value { get; set; } Property Value T"
  },
  "api/SQLHelperDB.HelperClasses.Interfaces.IParameter.html": {
    "href": "api/SQLHelperDB.HelperClasses.Interfaces.IParameter.html",
    "title": "Interface IParameter | SQLHelper API Reference",
    "summary": "Interface IParameter Namespace SQLHelperDB.HelperClasses.Interfaces Assembly SQLHelper.DB.dll Parameter interface public interface IParameter Properties DatabaseType Database type DbType DatabaseType { get; set; } Property Value DbType Direction Direction of the parameter ParameterDirection Direction { get; set; } Property Value ParameterDirection ID The name that the parameter goes by string ID { get; set; } Property Value string InternalValue Gets the internal value. object? InternalValue { get; } Property Value object The internal value. ParameterStarter Gets the parameter starter. string ParameterStarter { get; } Property Value string The parameter starter. Methods AddParameter(DbCommand) Adds this parameter to the SQLHelper void AddParameter(DbCommand helper) Parameters helper DbCommand SQLHelper AddParameter(string) Finds itself in the string command and adds the value string AddParameter(string command) Parameters command string Command to add to Returns string The resulting string CreateCopy(string) Creates a copy of the parameter IParameter CreateCopy(string suffix) Parameters suffix string Suffix to add to the parameter (for batching purposes) Returns IParameter A copy of the parameter"
  },
  "api/SQLHelperDB.HelperClasses.Interfaces.html": {
    "href": "api/SQLHelperDB.HelperClasses.Interfaces.html",
    "title": "Namespace SQLHelperDB.HelperClasses.Interfaces | SQLHelper API Reference",
    "summary": "Namespace SQLHelperDB.HelperClasses.Interfaces Interfaces IBatch A batch of commands interface ICommand Command interface IConnection Data source interface IParameter Parameter interface IParameter<T> Parameter interface"
  },
  "api/SQLHelperDB.HelperClasses.Parameter-1.html": {
    "href": "api/SQLHelperDB.HelperClasses.Parameter-1.html",
    "title": "Class Parameter<TDataType> | SQLHelper API Reference",
    "summary": "Class Parameter<TDataType> Namespace SQLHelperDB.HelperClasses Assembly SQLHelper.DB.dll Holds parameter information public class Parameter<TDataType> : ParameterBase<TDataType>, IParameter<TDataType>, IParameter Type Parameters TDataType Data type of the parameter Inheritance object ParameterBase<TDataType> Parameter<TDataType> Implements IParameter<TDataType> IParameter Inherited Members ParameterBase<TDataType>.DatabaseType ParameterBase<TDataType>.Direction ParameterBase<TDataType>.ID ParameterBase<TDataType>.InternalValue ParameterBase<TDataType>.ParameterStarter ParameterBase<TDataType>.Value ParameterBase<TDataType>.BatchID ParameterBase<TDataType>.AddParameter(string) ParameterBase<TDataType>.Equals(object) ParameterBase<TDataType>.GetHashCode() ParameterBase<TDataType>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors Parameter(string, DbType, object?, ParameterDirection, string) Constructor public Parameter(string id, DbType type, object? value = null, ParameterDirection direction = ParameterDirection.Input, string parameterStarter = \"@\") Parameters id string ID of the parameter type DbType Database type value object Value of the parameter direction ParameterDirection Direction of the parameter parameterStarter string Parameter starter Parameter(string, SqlDbType, object?, ParameterDirection, string) Constructor public Parameter(string id, SqlDbType type, object? value = null, ParameterDirection direction = ParameterDirection.Input, string parameterStarter = \"@\") Parameters id string ID of the parameter type SqlDbType Database type value object Value of the parameter direction ParameterDirection Direction of the parameter parameterStarter string Parameter starter Parameter(string, TDataType, ParameterDirection, string) Constructor public Parameter(string id, TDataType value, ParameterDirection direction = ParameterDirection.Input, string parameterStarter = \"@\") Parameters id string ID of the parameter value TDataType Value of the parameter direction ParameterDirection Direction of the parameter parameterStarter string Parameter starter Methods AddParameter(DbCommand) Adds this parameter to the SQLHelper public override void AddParameter(DbCommand helper) Parameters helper DbCommand SQLHelper CreateCopy(string) Creates a copy of the parameter public override IParameter CreateCopy(string suffix) Parameters suffix string Suffix to add to the parameter (for batching purposes) Returns IParameter A copy of the parameter"
  },
  "api/SQLHelperDB.HelperClasses.StringParameter.html": {
    "href": "api/SQLHelperDB.HelperClasses.StringParameter.html",
    "title": "Class StringParameter | SQLHelper API Reference",
    "summary": "Class StringParameter Namespace SQLHelperDB.HelperClasses Assembly SQLHelper.DB.dll Holds parameter information public class StringParameter : ParameterBase<string>, IParameter<string>, IParameter Inheritance object ParameterBase<string> StringParameter Implements IParameter<string> IParameter Inherited Members ParameterBase<string>.DatabaseType ParameterBase<string>.Direction ParameterBase<string>.ID ParameterBase<string>.InternalValue ParameterBase<string>.ParameterStarter ParameterBase<string>.Value ParameterBase<string>.BatchID ParameterBase<string>.AddParameter(string) ParameterBase<string>.Equals(object) ParameterBase<string>.GetHashCode() ParameterBase<string>.ToString() object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Remarks Constructor Constructors StringParameter(string, string, ParameterDirection, string) Holds parameter information public StringParameter(string id, string value, ParameterDirection direction = ParameterDirection.Input, string parameterStarter = \"@\") Parameters id string ID of the parameter value string Value of the parameter direction ParameterDirection Direction of the parameter parameterStarter string Parameter starter Remarks Constructor Methods AddParameter(DbCommand) Adds this parameter to the SQLHelper public override void AddParameter(DbCommand helper) Parameters helper DbCommand SQLHelper CreateCopy(string) Creates a copy of the parameter public override IParameter CreateCopy(string suffix) Parameters suffix string Suffix to add to the parameter (for batching purposes) Returns IParameter A copy of the parameter"
  },
  "api/SQLHelperDB.HelperClasses.html": {
    "href": "api/SQLHelperDB.HelperClasses.html",
    "title": "Namespace SQLHelperDB.HelperClasses | SQLHelper API Reference",
    "summary": "Namespace SQLHelperDB.HelperClasses Classes Batch Holds information for a set of commands Command<TCallbackData> Command holder class Connection Data source class Parameter<TDataType> Holds parameter information StringParameter Holds parameter information"
  },
  "api/SQLHelperDB.SQLHelper.html": {
    "href": "api/SQLHelperDB.SQLHelper.html",
    "title": "Class SQLHelper | SQLHelper API Reference",
    "summary": "Class SQLHelper Namespace SQLHelperDB Assembly SQLHelper.DB.dll SQL helper class public class SQLHelper Inheritance object SQLHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SQLHelper(ObjectPool<StringBuilder>, IConfiguration, ILogger<SQLHelper>?) Initializes a new instance of the SQLHelper class. public SQLHelper(ObjectPool<StringBuilder> stringBuilderPool, IConfiguration configuration, ILogger<SQLHelper>? logger = null) Parameters stringBuilderPool ObjectPool<StringBuilder> The string builder pool. configuration IConfiguration The configuration. logger ILogger<SQLHelper> The logger. Properties Batch Gets the batch. protected IBatch Batch { get; } Property Value IBatch The batch. Configuration Gets the configuration. protected IConfiguration Configuration { get; } Property Value IConfiguration The configuration. Count Gets the number of commands currently in the batch. public int Count { get; } Property Value int The number of commands currently in the batch DatabaseConnection Gets or sets the source. public IConnection? DatabaseConnection { get; } Property Value IConnection The source. StringBuilderPool Gets the string builder pool. protected ObjectPool<StringBuilder> StringBuilderPool { get; } Property Value ObjectPool<StringBuilder> The string builder pool. Methods AddHeader(CommandType, string, params object[]?) Adds a query that gets carried across in internal batches. public SQLHelper AddHeader(CommandType commandType, string command, params object[]? parameters) Parameters commandType CommandType Type of the command. command string The command. parameters object[] The parameters. Returns SQLHelper This AddHeader<TCallbackData>(Action<ICommand, List<dynamic>, TCallbackData>, TCallbackData, CommandType, string, params object[]?) Adds a query that gets carried across in internal batches. public SQLHelper AddHeader<TCallbackData>(Action<ICommand, List<dynamic>, TCallbackData> callback, TCallbackData callbackObject, CommandType commandType, string command, params object[]? parameters) Parameters callback Action<ICommand, List<dynamic>, TCallbackData> The callback. callbackObject TCallbackData The callback object. commandType CommandType Type of the command. command string The command. parameters object[] The parameters. Returns SQLHelper This Type Parameters TCallbackData The type of the callback data. AddQuery(SQLHelper) Adds an SQLHelper's commands to this instance public SQLHelper AddQuery(SQLHelper helper) Parameters helper SQLHelper The helper to copy the commands from Returns SQLHelper This AddQuery(CommandType, string, params object[]?) Adds a command. public SQLHelper AddQuery(CommandType commandType, string command, params object[]? parameters) Parameters commandType CommandType Type of the command. command string The command. parameters object[] The parameters. Returns SQLHelper This AddQuery<TCallbackData>(Action<ICommand, List<dynamic>, TCallbackData>, TCallbackData, CommandType, string, params object[]?) Adds a command which will call the callback function with the object specified when it public SQLHelper AddQuery<TCallbackData>(Action<ICommand, List<dynamic>, TCallbackData> callback, TCallbackData callbackObject, CommandType commandType, string command, params object[]? parameters) Parameters callback Action<ICommand, List<dynamic>, TCallbackData> The callback. callbackObject TCallbackData The callback object. commandType CommandType Type of the command. command string The command. parameters object[] The parameters. Returns SQLHelper This Type Parameters TCallbackData The type of the callback data. Copy() Creates a copy of this instance. public SQLHelper Copy() Returns SQLHelper A new SQLHelper based on this instance. CreateBatch() Clears the system and creates a new batch. public SQLHelper CreateBatch() Returns SQLHelper This CreateBatch(IConnection) Creates the batch using the connection specified. public SQLHelper CreateBatch(IConnection connection) Parameters connection IConnection The connection. Returns SQLHelper This CreateBatch(DbProviderFactory?, string) Creates the batch using the connection info specified. public SQLHelper CreateBatch(DbProviderFactory? factory = null, string database = \"Default\") Parameters factory DbProviderFactory The factory. database string The database. Returns SQLHelper This. ExecuteAsync() Executes the queries asynchronously. public Task<List<List<dynamic>>> ExecuteAsync() Returns Task<List<List<dynamic>>> The result of the queries ExecuteScalarAsync<TData>(TData?) Executes the batched commands and returns the first value, ignoring the rest (async). public Task<TData?> ExecuteScalarAsync<TData>(TData? defaultValue = default) Parameters defaultValue TData The default value. Returns Task<TData> The first value of the batch Type Parameters TData The type of the data to return. RemoveDuplicateCommands() Removes duplicate queries from the batch. public SQLHelper RemoveDuplicateCommands() Returns SQLHelper This ToString() Returns a string that represents this instance. public override string ToString() Returns string A string that represents this instance."
  },
  "api/SQLHelperDB.html": {
    "href": "api/SQLHelperDB.html",
    "title": "Namespace SQLHelperDB | SQLHelper API Reference",
    "summary": "Namespace SQLHelperDB Classes SQLHelper SQL helper class"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Welcome | SQLHelper API Reference",
    "summary": "Welcome Welcome to the API browser."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Code | SQLHelper API Reference",
    "summary": "Code using Microsoft.Data.SqlClient; using Microsoft.Extensions.DependencyInjection; namespace SQLHelper.Example { /// <summary> /// This is an example program that shows how to use the SQLHelper.DB library to execute a batch of queries. /// </summary> internal class Program { /// <summary> /// Defines the entry point of the application. /// </summary> /// <param name=\"args\">The arguments.</param> private static async Task Main(string[] args) { // Start by creating a new ServiceCollection and adding the Canister modules to it (this will also add the SQLHelper module) var Services = new ServiceCollection().AddCanisterModules()?.BuildServiceProvider(); // Get the SQLHelper instance from the ServiceCollection var Helper = Services.GetService<SQLHelperDB.SQLHelper>(); // Execute a batch of queries and return the results (this will return a list of lists of rows. The first list contains the results of each query. The inner lists contain the rows.) var Results = await Helper.CreateBatch(SqlClientFactory.Instance) .AddQuery(System.Data.CommandType.Text, \"SELECT * FROM [dbo].[TestTable]\") .AddQuery(System.Data.CommandType.Text, \"SELECT * FROM [dbo].[TestTable]\") .ExecuteAsync() .ConfigureAwait(false); // Go through each result foreach (var Result in Results) { // Go through each row in the result foreach (var Row in Result) { // Write the row to the console Console.WriteLine(Row.ToString()); } } } } }"
  },
  "index.html": {
    "href": "index.html",
    "title": "SQLHelper | SQLHelper API Reference",
    "summary": "SQLHelper SQLHelper is a simple class to help with running queries against a database. Basic Usage In order to use the system, you do need register it with your ServiceCollection: serviceCollection.AddCanisterModules(); This is required prior to using the SQLHelper class for the first time. Once Canister is set up, you can use the SQLHelper class: var Configuration = new ConfigurationBuilder() .AddInMemoryCollection() .Build(); var Instance = new SQLHelper(Configuration, SqlClientFactory.Instance, \"ConnectionString\"); Or simply ask for an instance using dependency injection: public MyClass(SQLHelper helper) { ... } The SQLHelper class takes in a IConfiguration class, a DbProviderFactory class, and the connection string. The connection string can just be the name of a connection string in your configuration object. Once an instance is set up, you can create a batch, add queries, and then execute them. var Results = Instance.CreateBatch() .AddQuery(CommandType.Text,\"SELECT * FROM [TestDatabase].[dbo].[TestTable]\") .AddQuery(CommandType.Text,\"SELECT * FROM [TestDatabase].[dbo].[TestTable2]\") .AddQuery(CommandType.Text,\"SELECT * FROM [TestDatabase].[dbo].[TestTable3]\") .Execute(); The Results object then holds the results for all 3 queries and is returned as IList<IList >. So in order to get the results from the queries: var FirstQueryResults = Results[0]; var SecondQueryResults = Results[1]; var ThirdQueryResults = Results[2]; It is also possible to convert the results from the dynamic type to a class type that you specify: var TestTableClasses = FirstQueryResults.Select(x => (TestTableClass)x).ToList(); The type will be converted automatically for you with no special type conversion required. SQLHelper also has an ExecuteScalar function: var Result = Instance.ExecuteScalar<int>(); This will either return the first value of the first set of results OR it will return the number of rows that were effected depending on whether or not the query was a select or not. Installation The library is available via Nuget with the package name \"SQLHelper.DB\". To install it run the following command in the Package Manager Console: Install-Package SQLHelper.DB Build Process In order to build the library you will require the following as a minimum: Visual Studio 2022 Other than that, just clone the project and you should be able to load the solution and build without too much effort."
  }
}